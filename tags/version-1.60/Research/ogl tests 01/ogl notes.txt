
OGL tips
========



-----------------

http://wxpython-users.1045709.n5.nabble.com/Size-of-a-DC-in-a-ScrolledWindow-td2361551.html

I think you have a couple of the basic concepts turned around.  First, 
the DC will only ever be the size of the physical device (the window), 
the virtual size is just a helper provided by wx to help you deal with 
scrolling.  Second, you should have a way to know how much space your 
drawing will need, and then set the virtual size of the scrolled window 
to be that size.  Then if the virtual size ends up being bigger than the 
client size then you will get scrollbars, otherwise there will be no 
scrollbars.  Your drawing code really shouldn't care if there are 
scrollbars or not, it just needs to draw as if there is no scrolling and 
wx.ScrolledWindow will take care of the rest.  You just need to call 
self.PrepareDC(dc) at the beginning of the draw and it will reset the 
DC's origin to take the current scroll position into account automatically. 


-- 
Robin Dunn 
Software Craftsman 
http://wxPython.org  Java give you jitters?  Relax with wxPython! 

--------------

ANDY NOTE

class Diagram(object):

    def Clear(self, dc):
        """Clear the specified device context."""
        dc.Clear()

Yes its true, when I call clear only the physical area is cleared and when I
scroll down I still see other shapes of my workspace.  
And it always clears the top area of the workspace, never the scrolled down bit.

HOW do I clear everything
on the virtual canvas?  Then again - perhaps this is the wrong approach?

-------------------------


http://wiki.wxpython.org/WindowSizeInfo

Window Size Information

It can sometimes be confusing to keep track of the various size-related attributes of a wx.Window, how they relate to each other, and how they interact with sizers. This document will attempt to clear the fog a little, and give some simple explanations of things.

BestSize: The best size of a widget depends on what kind of widget it is, and usually also on the contents of the widget. For example a wx.ListBox's best size will be calculated based on how many items it has, up to a certain limit, or a wx.Button's best size will be calculated based on its label size, but normally won't be smaller than the platform default button size (unless a style flag overrides that). Get the picture? There is a special method in the C++ code called DoGetBestSize() that a class needs to override if it wants to calculate its own best size based on its content. The default DoGetBestSize() is designed for use in container windows, such as wx.Panel, and works something like this:

if the window has a sizer then it is used to calculate the best size.
if the window has layout constraints then that is used to calculate the best size.
if the window has children then the best size is set to be large enough to show all the children.
if there are no children then the window's min size will be used for the best size.
if there is no min size, then the current size is used for the best size.
MinSize: The min size of a widget is a size that is normally explicitly set by the programmer either with the SetMinSize() method or the SetSizeHints() method. Most controls will also set the min size to the size given in the control's constructor if a non-default value is passed. Top-level windows such as wx.Frame will not allow the user to resize the frame below the min size.

Size: The size of a widget can be explicitly set or fetched with the SetSize() or GetSize() methods. This size value is the size that the widget is currently using on screen and is the way to change the size of something that is not being managed by a sizer.

ClientSize: The client size represents the widget's area inside of any borders belonging to the widget and is the area that can be drawn upon in a EVT_PAINT event. If a widget doesn't have a border then its client size is the same as its size.

Initial size: The initial size of a widget is the size given to the constructor of the widget, if any. As mentioned above most controls will also set this size value as the control's min size. If the size passed to the constructor is the default wx.DefaultSize, or if the size is not fully specified (such as "size=(150,-1)") then most controls will fill in the size using the best size and will set the initial size of the control to the resulting size.

AdjustedBestSize: This value is calculated by taking the max of the widget's best size and min size values and returning the result. This has been removed in 2.7.2.

GetEffectiveMinSize: (formerly GetBestFittingSize) A blending of the widget's min size and best size, giving precedence to the min size. For example, if a widget's min size is set to (150, -1) and the best size is (80, 22) then the best fitting size is (150, 22). If the minsize is (50, 20) then the best fitting size is (50, 20). This method is what is called by the sizers when determining what the requirements of each item in the sizer is, and is used for calculating the overall minimum needs of the sizer.

SetInitialSize(size): (formerly SetBestFittingSize) This is a little different than the typical size setters. Rather than just setting an "initial size" attribute it actually sets the minsize to the value passed in, blends that value with the best size, and then sets the size of the widget to be the result. So you can consider this method to be a "Smart SetSize". This method is what is called by the constructor of most controls to set the minsize and initial size of the control.

window.Fit(): The Fit method sets the size of a window to fit around its children. If it has no children then nothing is done, if it does have children then the size of the window is set to the window's best size.

sizer.Fit(window): This sets the size of the window to be large enough to accommodate the minimum size needed by the sizer, (along with a few other constraints...) If the sizer is the one that is assigned to the window then this should be equivalent to window.Fit().

sizer.Layout(): Recalculates the minimum space needed by each item in the sizer, and then lays out the items within the space currently allotted to the sizer.

window.Layout(): If the window has a sizer then it sets the space given to the sizer to the current size of the window, which results in a call to sizer.Layout(). If the window has layout constraints instead of a sizer then the constraints algorithm is run. The Layout method is what is called by the default EVT_SIZE handler for container windows.

---------------------

http://wxpython.org/docs/api/wx.Window-class.html

ClearBackground(self)

	Clears the window by filling it with the current background colour. Does not cause an erase background event to be generated.

GetVirtualSize(self)

	Get the the virtual size of the window in pixels. For most windows this is just the client area of the window, but for some like scrolled windows it is more or less independent of the screen window size.

	Returns:
		Size



Refresh(self, eraseBackground=True, rect=None)

	Mark the specified rectangle (or the whole window) as "dirty" so it will be repainted. Causes an EVT_PAINT event to be generated and sent to the window.

	Parameters:
	eraseBackground 
			   (type=bool)
	rect 
			   (type=Rect)

RefreshRect(self, rect, eraseBackground=True)

	Redraws the contents of the given rectangle: the area inside it will be repainted. This is the same as Refresh but has a nicer syntax.

	Parameters:
	rect 
			   (type=Rect)
	eraseBackground 
			   (type=bool)
		   
--------------------------

http://stackoverflow.com/questions/3147613/flicker-free-drawable-scrolledwindow

From Robin Dunn himself:

First, a Refresh() by default will erase the background before sending the paint event (although setting the BG style or catching the erase event would have taken care of that.) The second and probably most visible problem in this case is that in your on_motion handler you are not offsetting the ClientDC by the scroll offsets, just the position in the buffer that you are drawing the line segment at. So when the buffer is flushed out to the client DC it is drawn at the physical (0,0), not the virtual (0,0). In other words, the flicker you are seeing is coming from drawing the buffer at the wrong position after every mouse drag event, and then it immediately being drawn again at the right position in the on_paint triggered by the Refresh().

You should be able to fix this by calling PrepareDC on the client DC before using it, like this:

    cdc = wx.CLientDC(self)
    self.PrepareDC(cdc)
    dc = wx.BufferedDC(cdc, self.buffer)

	However since you are doing a Refresh or RefreshRect anyway, there is no need to use a client DC here at all, just let the flushing of the buffer to the screen be done in on_paint instead:

    dc = wx.BufferedDC(None, self.buffer)
	
-----------------------------------

http://wxpython-users.1045709.n5.nabble.com/how-to-scroll-wx-Window-horizontally-td2356910.html
	
Pan Xingzhi wrote:

> Robin, 
> 
>     Nice to hear from you again in 2008. Thank you for the direction. 
> 
>     I kept asking questions about scrolling because I feel that 
> scrolling in wxPython is a little bit weird, but to accomplish my task 
> I have to thoroughly understand what's going on. There is something 
> unusual but I couldn't tell, until I took some time to think about it, 
> inside and out. Then I realized that in wxPython, both containers and 
> non-containers can have scrolling ability (though it seems that 
> wxPython do not emphasize the difference between the two). So my 
> questions came again. I put my understandings below, please correct me 
> if I'm wrong: 
> 
>     1. For non-container widgets like wx.TreeCtrl, by default, 
> scrollbars show up when the virtual size gets larger than the client 
> size.
... [show rest of quote]

Yes, in general.  More specifically, widgets like this manage their own 
scrollbars internally, and wx doesn't really have access to them[*]. 
The can be considered as an implementation detail that just happens to 
be used inside the "black box" that is the widget. 

[*] The exception of course is if the widget is implemented generically 
using wx itself, but you can't depend on that because for a particular 
widget it may be native on some platforms and generic on others. 


>     2. The virtual size of non-containers is decided by the content of 
> the non-container widget, e.g., the text in the TextCtrl, items in a 
> TreeCtrl. 

Yes. 

>     3. For containers, the virtual size is calculated from the size 
> (*not* virtual size) and position of its children (suppose we don't 
> use sizers). 

No.  You need to explicitly set the virtual size, although sizers can be 
used to help with this. 

>     4. The condition for scrollbars of containers to show up is the 
> same as non-containers. 

Scrollbars will be shown if the virtual size is greater than the client 
size. 

> 
>     Btw, you guys really should rename wx.ScrolledWindow to 
> ScrolledPanel or something. After all it's a container. A beginner 
> would easily think ScrolledWIndow as a direct child of wx.Window. 
> (However I found a wx.lib.scrolledpanel.ScrolledPanel already occupied 
> the name.) 

Yep, this was discussed in the past, but nothing was done because there 
wasn't a clean migration path that made sense that would also preserve 
backwards compatibility. 


-- 
Robin Dunn 
Software Craftsman 
http://wxPython.org  Java give you jitters?  Relax with wxPython! 


-----------------------------------




diff -bpruN pynsource/pynsource/pyNsourceGui.py pynsource-wx2.6/pynsource/pyNsourceGui.py
--- pynsource/pynsource/pyNsourceGui.py	2006-09-28 15:55:24.000000000 +0200
+++ pynsource-wx2.6/pynsource/pyNsourceGui.py	2006-10-07 09:42:57.000000000 +0200
@@ -7,15 +7,13 @@ Version 1.4b
 
 (c) Andy Bulka 2004-2006
 
-Some code borrowed from wxPython Library and Boa.
+Some code borrowed from wx.Python Library and Boa.
 License: Free
 """
 
 
-from wxPython.wx import *
-from wxPython.ogl import *
 import wx
-from wx import Frame
+from wx.lib.ogl import *
 
 #import images
 
@@ -27,20 +25,20 @@ WINDOW_SIZE = (640,480)
 
 
 
-class DiamondShape(wxPolygonShape):
+class DiamondShape(PolygonShape):
     def __init__(self, w=0.0, h=0.0):
-        wxPolygonShape.__init__(self)
+        PolygonShape.__init__(self)
         if w == 0.0:
             w = 60.0
         if h == 0.0:
             h = 60.0
 
-        ## Either wxRealPoints or 2-tuples of floats  works.
+        ## Either wx.RealPoints or 2-tuples of floats  works.
 
-        #points = [ wxRealPoint(0.0,    -h/2.0),
-        #          wxRealPoint(w/2.0,  0.0),
-        #          wxRealPoint(0.0,    h/2.0),
-        #          wxRealPoint(-w/2.0, 0.0),
+        #points = [ wx.RealPoint(0.0,    -h/2.0),
+        #          wx.RealPoint(w/2.0,  0.0),
+        #          wx.RealPoint(0.0,    h/2.0),
+        #          wx.RealPoint(-w/2.0, 0.0),
         #          ]
         points = [ (0.0,    -h/2.0),
                    (w/2.0,  0.0),
@@ -53,35 +51,35 @@ class DiamondShape(wxPolygonShape):
 
 #----------------------------------------------------------------------
 
-class RoundedRectangleShape(wxRectangleShape):
+class RoundedRectangleShape(RectangleShape):
     def __init__(self, w=0.0, h=0.0):
-        wxRectangleShape.__init__(self, w, h)
+        RectangleShape.__init__(self, w, h)
         self.SetCornerRadius(-0.3)
 
 
 #----------------------------------------------------------------------
 
-class DividedShape(wxDividedShape):
+class myDividedShape(DividedShape):
     def __init__(self, width, height, canvas):
-        wxDividedShape.__init__(self, width, height)
+        DividedShape.__init__(self, width, height)
         if UML_STYLE_1:
             self.BuildRegions(canvas)
 
     def BuildRegions(self, canvas):
-        region1 = wxShapeRegion()
-        region1.SetText('wxDividedShape')
+        region1 = ShapeRegion()
+        region1.SetText('DividedShape')
         region1.SetProportions(0.0, 0.2)
         region1.SetFormatMode(FORMAT_CENTRE_HORIZ)
         self.AddRegion(region1)
 
-        region2 = wxShapeRegion()
+        region2 = ShapeRegion()
         region2.SetText('This is Region number two.')
         region2.SetProportions(0.0, 0.3)
         region2.SetFormatMode(FORMAT_NONE)
         #region2.SetFormatMode(FORMAT_CENTRE_HORIZ|FORMAT_CENTRE_VERT)
         self.AddRegion(region2)
 
-        region3 = wxShapeRegion()
+        region3 = ShapeRegion()
 
         region3.SetText("blah\nblah\nblah blah")
         region3.SetProportions(0.0, 0.5)
@@ -103,7 +101,7 @@ class DividedShape(wxDividedShape):
         regions and draws it. There seems to be a problem that
         the text is not normally drawn. """
         canvas = self.GetCanvas()
-        dc = wxClientDC(canvas)
+        dc = wx.ClientDC(canvas)
         canvas.PrepareDC(dc)
         count = 0
         for region in self.GetRegions():
@@ -115,7 +113,7 @@ class DividedShape(wxDividedShape):
         rnum = 0
         if canvas is None:
             canvas = self.GetCanvas()
-        dc = wxClientDC(canvas)  # used for measuring
+        dc = wx.ClientDC(canvas)  # used for measuring
         for region in self.GetRegions():
             text = region.GetText()
             self.FormatText(dc, text, rnum)
@@ -123,19 +121,19 @@ class DividedShape(wxDividedShape):
 
 
     def OnSizingEndDragLeft(self, pt, x, y, keys, attch):
-        self.base_OnSizingEndDragLeft(pt, x, y, keys, attch)
+        DividedShape.OnSizingEndDragLeft(self, pt, x, y, keys, attch)
         self.SetRegionSizes()
         self.ReformatRegions()
         self.GetCanvas().Refresh()
 
 
-class DividedShapeSmall(DividedShape):
+class myDividedShapeSmall(myDividedShape):
     def __init__(self, width, height, canvas):
-        DividedShape.__init__(self, width, height, canvas)
+        myDividedShape.__init__(self, width, height, canvas)
 
     def BuildRegions(self, canvas):
-        region1 = wxShapeRegion()
-        region1.SetText('wxDividedShapeSmall')
+        region1 = ShapeRegion()
+        region1.SetText('DividedShapeSmall')
         region1.SetProportions(0.0, 0.9)
         region1.SetFormatMode(FORMAT_CENTRE_HORIZ)
         self.AddRegion(region1)
@@ -149,23 +147,23 @@ class DividedShapeSmall(DividedShape):
         rnum = 0
         if canvas is None:
             canvas = self.GetCanvas()
-        dc = wxClientDC(canvas)  # used for measuring
+        dc = wx.ClientDC(canvas)  # used for measuring
         for region in self.GetRegions():
             text = region.GetText()
             self.FormatText(dc, text, rnum)
             rnum += 1
 
     def OnSizingEndDragLeft(self, pt, x, y, keys, attch):
-        self.base_OnSizingEndDragLeft(pt, x, y, keys, attch)
+        DividedShape.OnSizingEndDragLeft(self, pt, x, y, keys, attch)
         self.SetRegionSizes()
         self.ReformatRegions()
         self.GetCanvas().Refresh()
 
 #----------------------------------------------------------------------
 
-class MyEvtHandler(wxShapeEvtHandler):
+class MyEvtHandler(ShapeEvtHandler):
     def __init__(self, log, frame):
-        wxShapeEvtHandler.__init__(self)
+        ShapeEvtHandler.__init__(self)
         self.log = log
         self.statbarFrame = frame
         self.ZapShape = self._ZapShapeStub
@@ -201,7 +199,7 @@ class MyEvtHandler(wxShapeEvtHandler):
         shape = self.GetShape()
         #print shape.__class__, shape.GetClassName()
         canvas = shape.GetCanvas()
-        dc = wxClientDC(canvas)
+        dc = wx.ClientDC(canvas)
         canvas.PrepareDC(dc)
 
         if shape.Selected():
@@ -230,19 +228,19 @@ class MyEvtHandler(wxShapeEvtHandler):
 
     def OnEndDragLeft(self, x, y, keys = 0, attachment = 0):
         shape = self.GetShape()
-        self.base_OnEndDragLeft(x, y, keys, attachment)
+        ShapeEvtHandler.OnEndDragLeft(self, x, y, keys, attachment)
         if not shape.Selected():
             self.OnLeftClick(x, y, keys, attachment)
         self.UpdateStatusBar(shape)
 
 
     def OnSizingEndDragLeft(self, pt, x, y, keys, attch):
-        self.base_OnSizingEndDragLeft(pt, x, y, keys, attch)
+        ShapeEvtHandler.OnSizingEndDragLeft(self, pt, x, y, keys, attch)
         self.UpdateStatusBar(self.GetShape())
 
 
     def OnMovePost(self, dc, x, y, oldX, oldY, display):
-        self.base_OnMovePost(dc, x, y, oldX, oldY, display)
+        ShapeEvtHandler.OnMovePost(self, dc, x, y, oldX, oldY, display)
         self.UpdateStatusBar(self.GetShape())
 
 
@@ -252,7 +250,7 @@ class MyEvtHandler(wxShapeEvtHandler):
         shape = self.GetShape()
 
         canvas = shape.GetCanvas()
-        dc = wxClientDC(canvas)
+        dc = wx.ClientDC(canvas)
         canvas.PrepareDC(dc)
         diagram = canvas.GetDiagram()
 
@@ -273,26 +271,26 @@ class MyEvtHandler(wxShapeEvtHandler):
         self.Refreshredraw(event=self)   # will call the app level refresh() method in window.  Event is passed for fun - we don't look at it.
 
         """
-        Some useful documentation on wxOGL
+        Some useful documentation on wx.OGL
 
-        wxLineShape::Unlink
+        LineShape::Unlink
         void Unlink()
         Unlinks the line from the nodes at either end.
 
-        wxShape::GetLines
-        wxList& GetLines() const
+        wx.Shape::GetLines
+        wx.List& GetLines() const
         Returns a reference to the list of lines connected to this shape.
 
-        wxShape::RemoveLine
-        void RemoveLine(wxLineShape* line)
+        wx.Shape::RemoveLine
+        void RemoveLine(LineShape* line)
         Removes the given line from the shape's list of attached lines.
 
-        wxDiagram::Redraw
-        void Redraw(wxDC& dc)
+        wx.Diagram::Redraw
+        void Redraw(wx.DC& dc)
         Draws the shapes in the diagram on the specified device context.
 
-        wxDiagram::Clear
-        void Clear(wxDC& dc)
+        wx.Diagram::Clear
+        void Clear(wx.DC& dc)
         Clears the specified device context.
         """
 #----------------------------------------------------------------------
@@ -308,14 +306,14 @@ import sys, glob
 from pynsource import PythonToJava, PySourceAsJava
 
 
-class TestWindow(wxShapeCanvas):
+class TestWindow(ShapeCanvas):
     scrollStepX = 10
     scrollStepY = 10
     classnametoshape = {}
 
 
     def __init__(self, parent, log, frame):
-        wxShapeCanvas.__init__(self, parent)
+        ShapeCanvas.__init__(self, parent)
 
         maxWidth  = 1000
         maxHeight = 1000
@@ -323,17 +321,17 @@ class TestWindow(wxShapeCanvas):
 
         self.log = log
         self.frame = frame
-        self.SetBackgroundColour("LIGHT BLUE") #wxWHITE)
+        self.SetBackgroundColour("LIGHT BLUE") #wx.WHITE)
 
-        self.diagram = wxDiagram()
+        self.diagram = Diagram()
         self.SetDiagram(self.diagram)
         self.diagram.SetCanvas(self)
         self.shapes = []
         self.save_gdi = []
-        EVT_WINDOW_DESTROY(self, self.OnDestroy)
+        wx.EVT_WINDOW_DESTROY(self, self.OnDestroy)
 
-        self.font1 = wxFont(14, wxMODERN, wxNORMAL, wxNORMAL, false)
-        self.font2 = wxFont(10, wxMODERN, wxNORMAL, wxNORMAL, false)
+        self.font1 = wx.Font(14, wx.MODERN, wx.NORMAL, wx.NORMAL, False)
+        self.font2 = wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, False)
 
         #self.Go(path=r'C:\Documents and Settings\Administrator\My Documents\aa Python\pyNsource\Tests\PythonToJavaTest01\pythoninput01\*.py')
 
@@ -362,13 +360,13 @@ class TestWindow(wxShapeCanvas):
     def Clear(self):
         self.diagram.DeleteAllShapes()
 
-        dc = wxClientDC(self)
+        dc = wx.ClientDC(self)
         self.diagram.Clear(dc)
         # self.redraw()   # do not redraw cos nothing exists!
 
         # Re-init - doesn't help the File New problem....
         """
-        self.diagram = wxDiagram()
+        self.diagram = wx.Diagram()
         self.SetDiagram(self.diagram)
         self.diagram.SetCanvas(self)
         """
@@ -432,9 +430,9 @@ class TestWindow(wxShapeCanvas):
                 #
                 if classname not in self.classnametoshape:
                     #print 'BUILDING', classname, 'SEARCH', classname in self.classnametoshape, 'LEN', len(self.classnametoshape)
-                    rRectBrush = wxBrush("MEDIUM TURQUOISE", wxSOLID)
-                    dsBrush = wxBrush("WHEAT", wxSOLID)
-                    ds = self.MyAddShape(DividedShape(100, 150, self), 50, 145, wxBLACK_PEN, dsBrush, '')
+                    rRectBrush = wx.Brush("MEDIUM TURQUOISE", wx.SOLID)
+                    dsBrush = wx.Brush("WHEAT", wx.SOLID)
+                    ds = self.MyAddShape(myDividedShape(100, 150, self), 50, 145, wx.BLACK_PEN, dsBrush, '')
                     ds.SetCentreResize(0)  # Specify whether the shape is to be resized from the centre (the centre stands still) or from the corner or side being dragged (the other corner or side stands still).
 
                     ds.region1.SetText(classname)
@@ -451,7 +449,7 @@ class TestWindow(wxShapeCanvas):
                 # Build the UML shape
                 #
                 if classname not in self.classnametoshape:
-                    shape = DividedShape(width=100, height=150, canvas=self)
+                    shape = myDividedShape(width=100, height=150, canvas=self)
 
                     pos = (50,50)
                     maxWidth = 10 #padding
@@ -486,9 +484,9 @@ class TestWindow(wxShapeCanvas):
 
                     shape.SetRegionSizes()
 
-                    dsBrush = wxBrush("WHEAT", wxSOLID)
-                    #idx = self.addShape(shape, pos[0], pos[1], wxBLACK_PEN, dsBrush, '') # get back index
-                    ds = self.MyAddShape(shape, pos[0], pos[1], wxBLACK_PEN, dsBrush, '') # get back instance - but already had it...
+                    dsBrush = wx.Brush("WHEAT", wx.SOLID)
+                    #idx = self.addShape(shape, pos[0], pos[1], wx.BLACK_PEN, dsBrush, '') # get back index
+                    ds = self.MyAddShape(shape, pos[0], pos[1], wx.BLACK_PEN, dsBrush, '') # get back instance - but already had it...
 
                     shape.FlushText()
 
@@ -504,9 +502,9 @@ class TestWindow(wxShapeCanvas):
             if not classestocreate:
                 classestocreate = ('variant', 'unittest', 'list', 'object', 'dict')  # should add more classes and add them to a jar file to avoid namespace pollution.
             for classname in classestocreate:
-                rRectBrush = wxBrush("MEDIUM TURQUOISE", wxSOLID)
-                dsBrush = wxBrush("WHEAT", wxSOLID)
-                ds = self.MyAddShape(DividedShapeSmall(100, 30, self), 50, 145, wxBLACK_PEN, dsBrush, '')
+                rRectBrush = wx.Brush("MEDIUM TURQUOISE", wx.SOLID)
+                dsBrush = wx.Brush("WHEAT", wx.SOLID)
+                ds = self.MyAddShape(myDividedShapeSmall(100, 30, self), 50, 145, wx.BLACK_PEN, dsBrush, '')
                 if not UML_STYLE_1:
                     ds.BuildRegions(canvas=self)  # build the one region
                 ds.SetCentreResize(0)  # Specify whether the shape is to be resized from the centre (the centre stands still) or from the corner or side being dragged (the other corner or side stands still).
@@ -553,7 +551,7 @@ class TestWindow(wxShapeCanvas):
 
 
         # Wire up the associations
-        dc = wxClientDC(self)
+        dc = wx.ClientDC(self)
         self.PrepareDC(dc)
 
         self.DrawAssocLines(self.associations_generalisation, ARROW_ARROW, dc)
@@ -576,10 +574,10 @@ class TestWindow(wxShapeCanvas):
                 self._BuildAuxClasses(classestocreate=[toClassname]) # Emergency creation of some unknown class.
             toShape = self.classnametoshape[toClassname]
 
-            line = wxLineShape()
+            line = LineShape()
             line.SetCanvas(self)
-            line.SetPen(wxBLACK_PEN)
-            line.SetBrush(wxBLACK_BRUSH)
+            line.SetPen(wx.BLACK_PEN)
+            line.SetBrush(wx.BLACK_BRUSH)
             line.AddArrow(arrowtype)
             line.MakeLineControlPoints(2)
             fromShape.AddLine(line, toShape)
@@ -595,7 +593,7 @@ class TestWindow(wxShapeCanvas):
     def redraw(self):
         diagram = self.GetDiagram()
         canvas = diagram.GetCanvas()
-        dc = wxClientDC(canvas)
+        dc = wx.ClientDC(canvas)
         canvas.PrepareDC(dc)
         for shape in self.shapes:
             shape.Move(dc, shape.GetX(), shape.GetY())
@@ -607,8 +605,8 @@ class TestWindow(wxShapeCanvas):
         diagram = self.GetDiagram()
         canvas = diagram.GetCanvas()
 
-        dc = wxClientDC(self)        # NEW! handles scrolled situations
-        #dc = wxClientDC(canvas)     # doesn't handle scrolled situations
+        dc = wx.ClientDC(self)        # NEW! handles scrolled situations
+        #dc = wx.ClientDC(canvas)     # doesn't handle scrolled situations
 
         canvas.PrepareDC(dc)
         for shape in self.shapes:
@@ -619,8 +617,8 @@ class TestWindow(wxShapeCanvas):
 
     def newRegion(self, font, name, textLst, maxWidth, totHeight = 10):
         # Taken from Boa, but put into the canvas class instead of the scrolled window class.
-        region = wxShapeRegion()
-        dc = wxClientDC(self)  # self is the canvas
+        region = ShapeRegion()
+        dc = wx.ClientDC(self)  # self is the canvas
         dc.SetFont(font)
 
         for text in textLst:
@@ -663,7 +661,7 @@ class TestWindow(wxShapeCanvas):
 
         shapeslist = self.SortShapes()
 
-        dc = wxClientDC(self)
+        dc = wx.ClientDC(self)
         self.PrepareDC(dc)
 
         # When look at the status bar whilst dragging UML shapes, the coords of the top left are
@@ -713,13 +711,13 @@ class TestWindow(wxShapeCanvas):
         # Set size of entire diagram.
         height = y + 500
         width = maxx
-        self.setSize(wxSize(int(width+50), int(height+50))) # fudge factors to keep some extra space
+        self.setSize(wx.Size(int(width+50), int(height+50))) # fudge factors to keep some extra space
 
         # Now move the shapes into place.
         for (pos, classShape) in zip(positions, shapeslist):
             #print pos, classShape.region1.GetText()
             x, y = pos
-            classShape.Move(dc, x, y, false)
+            classShape.Move(dc, x, y, False)
 
 
 
@@ -760,17 +758,17 @@ class TestWindow(wxShapeCanvas):
 
     def addShape(self, shape, x, y, pen, brush, text):
         # Taken from Boa - we used to use MyAddShape
-#        shape.SetDraggable(false)
+#        shape.SetDraggable(False)
         shape.SetCanvas(self.canvas)
         shape.SetX(x)
         shape.SetY(y)
         shape.SetPen(pen)
         shape.SetBrush(brush)
-#        shape.SetFont(wxFont(6, wxMODERN, wxNORMAL, wxNORMAL, false))
+#        shape.SetFont(wx.Font(6, wx.MODERN, wx.NORMAL, wx.NORMAL, False))
         shape.AddText(text)
         shape.SetShadowMode(SHADOW_RIGHT)
         self.diagram.AddShape(shape)
-        shape.Show(true)
+        shape.Show(True)
 
         evthandler = MyEvtHandler()
         evthandler.menu = self.shapeMenu
@@ -789,8 +787,8 @@ class TestWindow(wxShapeCanvas):
         for shape in self.diagram.GetShapeList():
             if shape.GetParent() == None:
                 shape.SetCanvas(None)
-                shape.Destroy()
-        self.diagram.Destroy()
+                #shape.Destroy()
+        #self.diagram.Destroy()
 
 
 
@@ -802,7 +800,7 @@ class TestWindow(wxShapeCanvas):
 
     def OnLeftClick(self, x, y, keys):
         """
-        wxShapeCanvas::OnLeftClick
+        ShapeCanvas::OnLeftClick
         void OnLeftClick(double x, double y, int keys = 0)
 
         Called when a left click event on the canvas background is detected by OnEvent. You may override this member; by default it does nothing.
@@ -827,7 +825,7 @@ class TestWindow(wxShapeCanvas):
 
         if toUnselect:
             canvas = self.diagram.GetCanvas()
-            dc = wxClientDC(self)        # NEW! handles scrolled situations
+            dc = wx.ClientDC(self)        # NEW! handles scrolled situations
             canvas.PrepareDC(dc)
 
             for s in toUnselect:
@@ -843,11 +841,13 @@ class TestWindow(wxShapeCanvas):
 #----------------------------------------------------------------------
 
 class __Cleanup:
-    cleanup = wxOGLCleanUp
+    def __init__(self):
+        self.cleanup = OGLCleanUp
+
     def __del__(self):
         self.cleanup()
 
-# when this module gets cleaned up then wxOGLCleanUp() will get called
+# when this module gets cleaned up then OGLCleanUp() will get called
 __cu = __Cleanup()
 
 
@@ -881,11 +881,11 @@ class Log:
 
 
 
-class BoaApp(wxApp):
+class BoaApp(wx.App):
     def OnInit(self):
-        wxInitAllImageHandlers()
+        wx.InitAllImageHandlers()
 
-        #self.main = wxFrame1.create(None)
+        #self.main = wx.Frame1.create(None)
 
         #self.main = TestWindow(parent=self, log=None, frame=None)
 
@@ -893,7 +893,7 @@ class BoaApp(wxApp):
 
 
 
-        self.frame = Frame(None, -1, self.andyapptitle, pos=(50,50), size=(0,0),
+        self.frame = wx.Frame(None, -1, self.andyapptitle, pos=(50,50), size=(0,0),
                         style=wx.NO_FULL_REPAINT_ON_RESIZE|wx.DEFAULT_FRAME_STYLE)
         self.frame.CreateStatusBar()
         menuBar = wx.MenuBar()
@@ -993,12 +993,12 @@ class BoaApp(wxApp):
 
 
     def RecursivePathImport(self,event=None):
-        dlg = wxFileDialog(parent=self.frame, message="choose", defaultDir='.',
-            defaultFile="", wildcard="*.py", style=wxOPEN|wxMULTIPLE, pos=wxDefaultPosition)
-        if dlg.ShowModal() == wxID_OK:
+        dlg = wx.FileDialog(parent=self.frame, message="choose", defaultDir='.',
+            defaultFile="", wildcard="*.py", style=wx.OPEN|wx.MULTIPLE, pos=wx.DefaultPosition)
+        if dlg.ShowModal() == wx.ID_OK:
             filenames = dlg.GetPaths() # dlg.GetFilename()
             print 'Importing...'
-            wxBeginBusyCursor(cursor=wxHOURGLASS_CURSOR)
+            wx.BeginBusyCursor(cursor=wx.HOURGLASS_CURSOR)
             # self.fileloadhandler(filename)
             print filenames
 
@@ -1009,7 +1009,7 @@ class BoaApp(wxApp):
 
             self._HackToForceTheScrollbarToShowUp()
 
-            wxEndBusyCursor()
+            wx.EndBusyCursor()
             print 'Import - Done.'
 
 
@@ -1048,18 +1048,18 @@ class BoaApp(wxApp):
                     self.fileList.append( os.path.join(dir,f) )
 
     def FileImport(self, event):
-        dlg = wxFileDialog(parent=self.frame, message="choose", defaultDir='.',
-            defaultFile="", wildcard="*.py", style=wxOPEN|wxMULTIPLE, pos=wxDefaultPosition)
-        if dlg.ShowModal() == wxID_OK:
+        dlg = wx.FileDialog(parent=self.frame, message="choose", defaultDir='.',
+            defaultFile="", wildcard="*.py", style=wx.OPEN|wx.MULTIPLE, pos=wx.DefaultPosition)
+        if dlg.ShowModal() == wx.ID_OK:
             filenames = dlg.GetPaths() # dlg.GetFilename()
             print 'Importing...'
-            wxBeginBusyCursor(cursor=wxHOURGLASS_CURSOR)
+            wx.BeginBusyCursor(cursor=wx.HOURGLASS_CURSOR)
             # self.fileloadhandler(filename)
             print filenames
 
             self.win.Go(files=filenames)
 
-            wxEndBusyCursor()
+            wx.EndBusyCursor()
             print 'Import - Done.'
 
         self._HackToForceTheScrollbarToShowUp()
@@ -1073,15 +1073,15 @@ class BoaApp(wxApp):
         self.win.diagram.LoadFile('c:\\try\\testUml.txt')
         return
         """
-        dlg = wxFileDialog(parent=self.frame, message="choose", defaultDir='.',
-            defaultFile="", wildcard="*.py", style=wxOPEN|wxMULTIPLE, pos=wxDefaultPosition)
-        if dlg.ShowModal() == wxID_OK:
+        dlg = wx.FileDialog(parent=self.frame, message="choose", defaultDir='.',
+            defaultFile="", wildcard="*.py", style=wx.OPEN|wx.MULTIPLE, pos=wx.DefaultPosition)
+        if dlg.ShowModal() == wx.ID_OK:
             filenames = dlg.GetPaths() # dlg.GetFilename()
             print 'Importing...'
-            wxBeginBusyCursor(cursor=wxHOURGLASS_CURSOR)
+            wx.BeginBusyCursor(cursor=wx.HOURGLASS_CURSOR)
             # self.fileloadhandler(filename)
             print filenames
-            wxEndBusyCursor()
+            wx.EndBusyCursor()
             print 'Import - Done.'
         """
 
@@ -1090,15 +1090,15 @@ class BoaApp(wxApp):
         return
         self.win.diagram.SaveFile('c:\\try\\testUml.txt')
         """
-        dlg = wxFileDialog(parent=self.frame, message="choose", defaultDir='.',
-            defaultFile="", wildcard="*.py", style=wxOPEN|wxMULTIPLE, pos=wxDefaultPosition)
-        if dlg.ShowModal() == wxID_OK:
+        dlg = wx.FileDialog(parent=self.frame, message="choose", defaultDir='.',
+            defaultFile="", wildcard="*.py", style=wx.OPEN|wx.MULTIPLE, pos=wx.DefaultPosition)
+        if dlg.ShowModal() == wx.ID_OK:
             filenames = dlg.GetPaths() # dlg.GetFilename()
             print 'Importing...'
-            wxBeginBusyCursor(cursor=wxHOURGLASS_CURSOR)
+            wx.BeginBusyCursor(cursor=wx.HOURGLASS_CURSOR)
             # self.fileloadhandler(filename)
             print filenames
-            wxEndBusyCursor()
+            wx.EndBusyCursor()
             print 'Import - Done.'
         """
 
@@ -1116,21 +1116,21 @@ Helpful Reminder:
 
         from printframework import MyPrintout
 
-        self.printData = wxPrintData()
-        self.printData.SetPaperId(wxPAPER_LETTER)
+        self.printData = wx.PrintData()
+        self.printData.SetPaperId(wx.PAPER_LETTER)
 
-        self.box = wxBoxSizer(wxVERTICAL)
+        self.box = wx.BoxSizer(wx.VERTICAL)
         self.canvas = self.win.GetDiagram().GetCanvas()
 
         #self.log.WriteText("OnPrintPreview\n")
         printout = MyPrintout(self.canvas)
         printout2 = MyPrintout(self.canvas)
-        self.preview = wxPrintPreview(printout, printout2, self.printData)
+        self.preview = wx.PrintPreview(printout, printout2, self.printData)
         if not self.preview.Ok():
             self.log.WriteText("Houston, we have a problem...\n")
             return
 
-        frame = wxPreviewFrame(self.preview, self.frame, "This is a print preview")
+        frame = wx.PreviewFrame(self.preview, self.frame, "This is a print preview")
 
         frame.Initialize()
         frame.SetPosition(self.frame.GetPosition())
@@ -1157,9 +1157,9 @@ Helpful Reminder:
         self._HackToForceTheScrollbarToShowUp()  # this is just as necessary to get the screen to refresh.
 
     def MessageBox(self, msg):
-        dlg = wxMessageDialog(self.frame, msg,
-                              'A Message Box', wxOK | wxICON_INFORMATION)
-                              #wxYES_NO | wxNO_DEFAULT | wxCANCEL | wxICON_INFORMATION)
+        dlg = wx.MessageDialog(self.frame, msg,
+                              'A Message Box', wx.OK | wx.ICON_INFORMATION)
+                              #wx.YES_NO | wx.NO_DEFAULT | wx.CANCEL | wx.ICON_INFORMATION)
         dlg.ShowModal()
         dlg.Destroy()
 
@@ -1177,7 +1177,7 @@ def main():
 #----------------------------------------------------------------------
 # This creates some pens and brushes that the OGL library uses.
 
-    wxOGLInitialize()    # moved here for wxpython 2.5 compatibility
+    OGLInitialize()    # moved here for wxpython 2.5 compatibility
 
 #----------------------------------------------------------------------
     application.MainLoop()
Binary files pynsource/Tests/unittests_parse_01.pyc and pynsource-wx2.6/Tests/unittests_parse_01.pyc differ
Binary files pynsource/Tests/unittests_parse_02.pyc and pynsource-wx2.6/Tests/unittests_parse_02.pyc differ
Binary files pynsource/Tests/unittests_parse_03.pyc and pynsource-wx2.6/Tests/unittests_parse_03.pyc differ
Binary files pynsource/Tests/unittests_parse_04.pyc and pynsource-wx2.6/Tests/unittests_parse_04.pyc differ
Binary files pynsource/Tests/unittests_parse_05.pyc and pynsource-wx2.6/Tests/unittests_parse_05.pyc differ
Binary files pynsource/Tests/unittests_parse_06.pyc and pynsource-wx2.6/Tests/unittests_parse_06.pyc differ
